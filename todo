SHORT TERM
think about moving character queue to core to enable feeding
Add document.activate to call ui.activate
Implement all existing modes as persistent commands
Implement commandmode as a persistent command, similar to undomode
Think about possibility to add remap support (i.e. map keys forall modes)
    This is a generalization of the cancelkey feature
Select around/inside (not finished yet)
Enhance selector set
Incorporate testing with multiple sessions
Unittests for pattern select machinery
Think about how to decorate classes easily, without disabling subclassing
drag text operation

LONG TERM
Make labeling generation asynchronous
Persistent session (using a context manager?)
Improve syntax highlighting, for instance by disregarding quotes inside comments and strings
    select around should maybe also disregard brackets etc in comments and strings
Contextual completion
    For completion it is also needed that the full text can be constructed including the pending operation. (No it isn't!! Only filtering is done based on the input, the context is not changed)
Some sort of semantic snippet recognition, e.g. two identifiers that always need to be the same. If one changes, the other changes with it.
Switch to alternative regex engine?
Focus on non-atomic operations
Idea: jumplist of lines of changes

RESEARCH
Optimal configurable datastructure for text editing
    optimize it for linenumber queries as well, not only for char numbers
Optimal configurable datastructure for labeling/syntax highlighting
Store additional metadata such as the number of line breaks in a certain range
Executing regex over the whole text should be fast, so is this case we want lookup to be constant time (amortized)
